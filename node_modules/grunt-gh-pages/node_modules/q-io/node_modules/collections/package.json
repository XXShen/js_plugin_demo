{
  "name": "collections",
  "version": "0.1.24",
  "description": "data structures with idiomatic JavaScript collection interfaces",
  "homepage": "http://github.com/montagejs/collections",
  "author": {
    "name": "Kris Kowal",
    "email": "kris@cixar.com",
    "url": "http://github.com/kriskowal"
  },
  "keywords": [
    "collections",
    "data structures",
    "observable",
    "list",
    "set",
    "map",
    "splay"
  ],
  "bugs": {
    "url": "http://github.com/montagejs/collections/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://raw.github.com/montagejs/collections/master/LICENSE.md"
    }
  ],
  "repository": {
    "type": "git",
    "url": "http://github.com/montagejs/collections.git"
  },
  "dependencies": {
    "weak-map": "1.0.0"
  },
  "devDependencies": {
    "jasmine-node": "*",
    "istanbul": "*",
    "opener": "*"
  },
  "scripts": {
    "test": "jasmine-node spec",
    "cover": "istanbul cover node_modules/jasmine-node/bin/jasmine-node spec && istanbul report html && opener coverage/index.html"
  },
  "readme": "[![Build Status](https://travis-ci.org/montagejs/collections.png?branch=master)](http://travis-ci.org/montagejs/collections)\n\n# Collections\n\nThis package contains JavaScript implementations of common data\nstructures with idiomatic iterfaces, including extensions for Array and\nObject.\n\nYou can use these Node Packaged Modules with Node.js, [Browserify][],\n[Mr][], or any compatible CommonJS module loader.  Using a module loader\nor bundler when using Collections in web browsers has the advantage of\nonly incorporating the modules you need.  However, you can just embed\n`<script src=\"collections/collections.min.js\">` and *all* of the\ncollections will be introduced as globals.  :warning:\n`require(\"collections\")` is not supported.\n\n```\nnpm install collections --save\n```\n\n[Browserify]: https://github.com/substack/node-browserify\n[Mr]: https://github.com/montagejs/mr\n\n\n-   **List(values, equals, getDefault)**\n\n    ```javascript\n    var List = require(\"collections/list\");\n    ```\n\n    An ordered collection of values with fast insertion and deletion and\n    forward and backward traversal, backed by a cyclic doubly linked\n    list with a head node.  Lists support most of the Array interface,\n    except that they use and return nodes instead of integer indicies in\n    analogous functions.\n\n    Lists have a `head` `Node`. The node type is available as `Node` on\n    the list prototype and can be overridden by inheritors.  Each node\n    has `prev` and `next` properties.\n\n-   **Set(values, equals, hash, getDefault)**\n\n    ```javascript\n    var Set = require(\"collections/set\");\n    ```\n\n    A collection of unique values.  The set can be iterated in the order\n    of insertion.  With a good hash function for the stored values,\n    insertion and removal are fast regardless of the size of the\n    collection.  Values may be objects.  The `equals` and `hash`\n    functions can be overridden to provide alternate definitions of\n    \"unique\".  `Set` is backed by `FastSet` and `List`.\n\n-   **Map(map, equals, hash, getDefault)**\n\n    ```javascript\n    var Map = require(\"collections/map\");\n    ```\n\n    A collection of key and value entries with unique keys.  Keys may be\n    objects.  The collection iterates in the order of insertion.  `Map`\n    is backed by `Set`.\n\n-   **MultiMap(map, getDefault, equals, hash)**\n\n    ```javascript\n    var MultiMap = require(\"collections/multi-map\");\n    ```\n\n    A collection of keys mapped to collections of values.  The default\n    `getDefault` collection is an `Array`, but it can be a `List` or any\n    other array-like object.  `MultiMap` inherits `Map` but overrides\n    the `getDefault(key)` provider.\n\n-   **WeakMap()**\n\n    ```javascript\n    var WeakMap = require(\"collections/weak-map\");\n    ```\n\n    A non-iterable collection of key value pairs.  Keys must objects and\n    do not benefit from `hash` functions.  Some engines already\n    implement `WeakMap`.  The non-iterable requirement makes it possible\n    for weak maps to collect garbage when the key is no longer\n    available, without betraying when the key is collected.  The shimmed\n    implementation undetectably annotates the given key and thus does\n    not necessarily leak memory, but cannot collect certain reference\n    graphs.  This WeakMap shim was implemented by Mark Miller of Google.\n\n-   **SortedSet(values, equals, compare, getDefault)**\n\n    ```javascript\n    var SortedSet = require(\"collections/sorted-set\");\n    ```\n\n    A collection of unique values stored in stored order, backed by a\n    splay tree.  The `equals` and `compare` functions can be overridden\n    to provide alternate definitions of \"unique\".\n\n    The `compare` method *must* provide a total order of all unique\n    values.  That is, if `compare(a, b) === 0`, it *must* follow that\n    `equals(a, b)`.\n\n-   **SortedMap(map, equals, compare, getDefault)**\n\n    ```javascript\n    var SortedMap = require(\"collections/sorted-map\");\n    ```\n\n    A collection of key value pairs stored in sorted order.  `SortedMap`\n    is backed by `SortedSet` and the `GenericMap` mixin.\n\n-   **LruSet(values, maxLength, equals, hash, getDefault)**\n\n    ```javascript\n    var LruSet = require(\"collections/lru-set\");\n    ```\n\n    A cache with the Least-Recently-Used strategy for truncating its\n    content when it’s length exceeds `maxLength`.  `LruSet` is backed by\n    a `Set` and takes advantage of the already tracked insertion order.\n    Both getting and setting a value constitute usage, but checking\n    whether the set has a value and iterating values do not.\n\n-   **LruMap(map, maxLength, equals, hash, getDefault)**\n\n    ```javascript\n    var LruMap = require(\"collections/lru-map\");\n    ```\n\n    A cache of entries backed by an `LruSet`.\n\n-   **SortedArray(values, equals, compare, getDefault)**\n\n    ```javascript\n    var SortedArray = require(\"collections/sorted-array\");\n    ```\n\n    A collection of values stored in a stable sorted order, backed by an\n    array.\n\n-   **SortedArraySet(values, equals, compare, getDefault)**\n\n    ```javascript\n    var SortedArraySet = require(\"collections/sorted-array-set\");\n    ```\n\n    A collection of unique values stored in sorted order, backed by a\n    plain array.  If the given values are an actual array, the sorted\n    array set takes ownership of that array and retains its content.  A\n    sorted array set performs better than a sorted set when it has\n    roughly less than 100 values.\n\n-   **SortedArrayMap(values, equals, compare, getDefault)**\n\n    ```javascript\n    var SortedArrayMap = require(\"collections/sorted-array-map\");\n    ```\n\n    A collection of key value pairs stored in sorted order, backed by a\n    sorted array set.\n\n-   **FastSet(values, equals, hash, getDefault)**\n\n    ```javascript\n    var FastSet = require(\"collections/fast-set\");\n    ```\n\n    A collection of unique values stored like a hash table.  The\n    underlying storage is a `Dict` that maps hashes to lists of values\n    that share the same hash.  Values may be objects.  The `equals` and\n    `hash` functions can be overridden to provide alternate definitions\n    of \"unique\".\n\n-   **FastMap(map, equals, hash, getDefault)**\n\n    ```javascript\n    var FastMap = require(\"collections/fast-map\");\n    ```\n\n    A collection of key and value entries with unique keys, backed by a\n    set.  Keys may be objects.  `FastMap` is backed by `FastSet` and the\n    `GenericMap` mixin.\n\n-   **Dict(values, getDefault)**\n\n    ```javascript\n    var Dict = require(\"collections/dict\");\n    ```\n\n    A collection of string to value mappings backed by a plain\n    JavaScript object.  The keys are mangled to prevent collisions with\n    JavaScript properties.\n\n-   **Heap(values, equals, compare)**\n\n    ```javascript\n    var Heap = require(\"collections/heap\");\n    ```\n\n    A collection that can always quickly (constant time) report its\n    largest value, with reasonable performance for incremental changes\n    (logarithmic), using a contiguous array as its backing storage.\n    However, it does not track the sorted order of its elements.\n\n-   **Iterator(iterable)**\n\n    ```javascript\n    var Iterator = require(\"collections/iterator\");\n    ```\n\n    A wrapper for any iterable that implements `iterate` or iterator the\n    implements `next`, providing a rich lazy traversal interface.\n\n-   **Array**\n\n    ```javascript\n    require(\"collections/shim-array\");\n    ```\n\n    An ordered collection of values with fast random access, push, and\n    pop, but slow splice. The `array` module provides extensions so it\n    hosts all the expressiveness of other collections.  The `shim-array`\n    module shims EcmaScript 5 methods onto the array prototype if they\n    are not natively implemented.\n\n-   **Object**\n\n    ```javascript\n    require(\"collections/shim-object\");\n    ```\n\n    Can be used as a mapping of owned string keys to arbitrary values.\n    The `object` module provides extensions for the `Object` constructor\n    that support the map collection interface and can delegate to\n    methods of collections, allowing them to gracefully handle both\n    object literals and collections.\n\n## Constructor Arguments\n\nFor all of these constructors, the argument `values` is an optional\ncollection of initial values, and may be an array.  If the `values` are\nin a map collection, the the values are taken, but the keys are ignored.\n\n-   **map**\n\n    The `map` argument is an optional collection to copy shallowly into\n    the new mapping.  The `map` may be an object literal.  If `map`\n    implements `keys`, it is treated as a mapping itself and copied.\n    Otherwise, if `map` implements `forEach`, it may be any collection\n    of `[key, value]` pairs.\n\n`equals(x, y)`, `compare(x, y)`, and `hash(value)` are all optional\narguments overriding the meaning of equality, comparability, and\nconsistent hashing for the purposes of the collection.  `equals` must\nreturn a boolean.  `compare` must return an integer with the same\nrelationship to zero as x to y.  `hash` should consistently return the\nsame string for any given object.\n\n-   **equals(x, y)**\n\n    The default `equals` operator is implemented in terms of `===`, but\n    treats `NaN` as equal to itself and `-0` as distinct from `+0`.  It\n    also delegates to an `equals` method of either the left or right\n    argument if one exists.  The default equality operator is shimmed as\n    `Object.equals`.\n\n-   **compare(x, y)**\n\n    The default `compare` operator is implemented in terms of `<` and\n    `>`.  It delegates to the `compare` method of either the left or\n    right argument if one exists.  It inverts the result if it uses the\n    falls to the right argument.  The default comparator is shimmed as\n    `Object.compare`.\n\n-   **hash(value)**\n\n    The default `hash` operator uses `toString` for values and provides\n    a [Unique Label][] for arbitrary objects.  The default hash is\n    shimmed as `Object.hash`.\n\n[Unique Label]: (http://wiki.ecmascript.org/doku.php?id=harmony:weak_maps#unique_labeler)\n\n-   **getDefault(key or value)**\n\n    The default `getDefault` function is `Function.noop`, which returns\n    `undefined`.  The fallback function is used when you `get` a\n    nonexistant value from any collection.  The `getDefault` function\n    becomes a member of the collection object, so `getDefault` is called\n    with the collection as `this`, so you can also use it to guarantee\n    that default values in a collection are retained, as in `MultiMap`.\n\n\n## Collection Methods\n\nWhere these methods coincide with the specification of an existing\nmethod of Array, Array is noted as an implementation.  `Array+` refers\nto shimmed arrays, as installed with the `array` module.  `Object`\nrefers to methods implemented on the `Object` constructor function, as\nopposed to the `Object.prototype`.  `Object+` in turn refers to methods\nshimmed on the object constructor by the `object` module.  These\nfunctions accept the object as the first argument instead of the `this`\nimplied argument.  ~~Strikethrough~~ indicates an implementation that\nshould exist but has not yet been made (Send a pull request!).\n\nThese are all of the collections:\n\n(Array, Array+, Object+, Iterator, List, Set, Map, MultiMap, WeakMap,\nSortedSet, SortedMap, LruSet, LruMap, SortedArray, SortedArraySet,\nSortedArrayMap, FastSet, FastMap, Dict)\n\n-   **has(key)**\n\n    Whether a value for the given key exists.\n\n    (Object+, Map, MultiMap, SortedMap, LruMap, SortedArrayMap, FastMap,\n    Dict)\n\n    **has(value, opt_equals)**\n\n    Whether a value exists in this collection.  This is slow for list\n    (linear), but fast (logarithmic) for SortedSet and SortedArraySet,\n    and very fast (constant) for Set.\n\n    (Array+, List, Set, SortedSet, LruSet, SortedArray, SortedArraySet,\n    FastSet)\n\n-   **get(key or index)**\n\n    The value for a key.  If a Map or SortedMap lacks a key, returns\n    `getDefault(key)`.\n\n    (Array+, Map, SortedMap, SortedArrayMap, WeakMap, Object+)\n\n    **get(value)**\n\n    Gets the equivalent value, or falls back to `getDefault(value)`.\n\n    (List, Set, SortedSet, LruSet, SortedArray, SortedArraySet, FastSet)\n\n-   **set(key or index, value)**\n\n    Sets the value for a key.\n\n    (Map, MultiMap, WeakMap, SortedMap, LruMap, SortedArrayMap, FastMap,\n    Dict)\n\n-   **add(value)**\n\n    Adds a value.  Ignores the operation and returns false if an\n    equivalent value already exists.\n\n    (Array+, List, Set, SortedSet, LruSet, SortedArray, SortedArraySet,\n    FastSet, Heap)\n\n    **add(value, key)**\n\n    Aliases `set(key, value)`, to assist generic methods used for maps,\n    sets, and other collections.\n\n-   **addEach(values)**\n\n    Copies values from another collection to this one.\n\n    (Array+, List, Set, SortedSet, LruSet, SortedArray, SortedArraySet,\n    FastSet, Heap)\n\n    **addEach(mapping)**\n\n    Copies entries from another collection to this map.  If the mapping\n    implements `keys` (indicating that it is a mapping) and `forEach`,\n    all of the key value pairs are copied.  If the mapping only\n    implements `forEach`, it is assumed to contain `[key, value]` arrays\n    which are copied instead.\n\n    (Object+, Map, MultiMap, SortedMap, LruMap, SortedArrayMap, FastMap,\n    Dict)\n\n-   **delete(key)**\n\n    Deletes the value for a given key.  Returns whether the key was\n    found.\n\n    (Map, MultiMap, WeakMap, SortedMap, LruMap, SortedArrayMap, FastMap,\n    Dict)\n\n    **delete(value)**\n\n    Deletes a value.  Returns whether the value was found.\n\n    (Set, SortedSet, LruSet, SortedArray, SortedArraySet, FastSet, Heap)\n\n    **delete(value, equals)**\n\n    Deletes the equivalent value.  Returns whether the value was found.\n\n    (Array+, List)\n\n-   **deleteEach(values or keys)**\n\n    Deletes every value or every value for each key.\n\n    (Array+, List, Set, Map, MultiMap, SortedSet, SortedMap,\n    LruSet, LruMap, SortedArray, SortedArraySet, SortedArrayMap,\n    FastSet, FastMap, Dict, Heap)\n\n-   **indexOf(value)**\n\n    Returns the position in the collection of a value, or `-1` if it is\n    not found.  Returns the position of the first of equivalent values.\n    For an Array this takes linear time.  For a SortedArray and\n    SortedArraySet, it takes logarithmic time to perform a binary\n    search.  For a SortedSet, this takes ammortized logarithmic time\n    since it incrementally updates the number of nodes under each\n    subtree as it rotates.\n\n    (Array, ~~List~~, SortedSet, SortedArray, SortedArraySet)\n\n-   **lastIndexOf(value)**\n\n    Returns the position in the collection of a value, or `-1` if it is\n    not found.  Returns the position of the last of equivalent values.\n\n    (Array, ~~List~~, SortedArray, SortedArraySet)\n\n-   **find(value, opt_equals)**\n\n    Finds a value.  For List and SortedSet, returns the node at which\n    the value was found.  For SortedSet, the optional `equals` argument\n    is ignored.\n\n    (Array+, List, SortedSet)\n\n-   **findLast(value, opt_equals)**\n\n    Finds the last equivalent value, returning the node at which the\n    value was found.\n\n    (Array+, List, SortedArray, SortedArraySet)\n\n-   **findLeast()**\n\n    Finds the smallest value, returning the node at which it was found,\n    or undefined.  This is fast (logarithmic) and performs no rotations.\n\n    (SortedSet)\n\n-   **findLeastGreaterThan(value)**\n\n    Finds the smallest value greater than the given value.  This is fast\n    (logarithic) but does cause rotations.\n\n    (SortedSet)\n\n-   **findLeastGreaterThanOrEqual(value)**\n\n    Finds the smallest value greater than or equal to the given value.\n    This is fast (logarithmic) but does cause rotations.\n\n    (SortedSet)\n\n-   **findGreatest()**\n\n    (SortedSet)\n\n-   **findGreatestLessThan(value)**\n\n    (SortedSet)\n\n-   **findGreatestLessThanOrEqual(value)**\n\n    (SortedSet)\n\n-   **push(...values)**\n\n    Adds values to the end of a collection.\n\n    (Array, List)\n\n    **push(...values)** for non-dequeues\n\n    Adds values to their proper places in a collection.\n    This method exists only to have the same interface as other\n    collections.\n\n    (Set, SortedSet, LruSet, SortedArray, SortedArraySet, FastSet, Heap)\n\n-   **unshift(...values)**\n\n    Adds values to the beginning of a collection.\n\n    (Array, List)\n\n    **unshift(...values)** for non-dequeues\n\n    Adds values to their proper places in a collection.\n    This method exists only to have the same interface as other\n    collections.\n\n    (Set, SortedSet, LruSet, SortedArray, SortedArraySet, FastSet)\n\n-   **pop()**\n\n    Removes and returns the value at the end of a collection.  For a\n    Heap, this means the greatest contained value, as defined by the\n    comparator.\n\n    (Array, List, Set, SortedSet, LruSet, SortedArray, SortedArraySet,\n    Heap)\n\n-   **shift()**\n\n    Removes and returns the value at the beginning of a collection.\n\n    (Array, List, Set, SortedSet, LruSet, SortedArray, SortedArraySet)\n\n-   **peek()**\n\n    Returns the last value in an ordered collection.\n\n    (List)\n\n-   **poke(value)**\n\n    Replaces the last value in an ordered collection.\n\n    (List)\n\n-   **slice(start, end)**\n\n    Returns an array of the values contained in the\n    half-open interval [start, end), that is, including the start and\n    excluding the end.  For lists and arrays, both terms may be numeric\n    positive or negative indicies.  For a list, either term may be a\n    node.\n\n    (Array, List, SortedSet, SortedArray, SortedArraySet)\n\n-   **splice(start, length, ...values)**\n\n    Works as with an array, but for a list, the start may be an index or\n    a node.\n\n    (Array, List, SortedArray, SortedSet, SortedArraySet)\n\n-   **swap(start, length, values)**\n\n    Performs a splice without variadic arguments.\n\n    (Array+, List, SortedArray, SortedSet, SortedArraySet)\n\n-   **clear()**\n\n    Deletes the all values.\n\n    (Array+, Object+, List, Set, Map, MultiMap, SortedSet,\n    SortedMap, LruSet, LruMap, SortedArray, SortedArraySet,\n    SortedArrayMap, FastSet, FastMap, Dict, Heap)\n\n-   **sort(compare)**\n\n    Sorts a collection in place.  The comparator by only be a function.\n    The default comparator coerces unlike types rather than fail to\n    compare.\n\n    (Array)\n\n-   **sorted(compare, by, order)**\n\n    Returns a collection as an array in sorted order.  Accepts an\n    optional `compare(x, y)` function, `by(property(x))` function, and\n    `order` indicator, `-1` for descending, `1` for ascending, `0` for\n    stable.\n\n    Instead of a `compare` function, the comparator can be an object\n    with `compare` and `by` functions.  The default `compare` value is\n    `Object.compare`.\n\n    The `by` function must be a function that accepts a value from the\n    collection and returns a representative value on which to sort.\n\n    (Array+, List, Set, Map, SortedSet, LruSet, SortedArray,\n    SortedArraySet, FastSet, Heap)\n\n-   **group(callback, thisp, equals)**\n\n    Returns an array of [key, equivalence class] pairs where every\n    element from the collection is placed into an equivalence class\n    if they have the same corresponding return value from the given\n    callback.\n\n    (Array+, Object+, List, Set, Map, MultiMap, SortedSet,\n    SortedMap, LruSet, LruMap, SortedArray, SortedArraySet,\n    SortedArrayMap, FastSet, FastMap, Dict, Heap, Iterator)\n\n-   **reverse()**\n\n    Reverses a collection in place.\n\n    (Array, List)\n\n-   **reversed()**\n\n    Returns a collection of the same type with this collection's\n    contents in reverse order.\n\n    (Array, List)\n\n-   **enumerate(start=0)**\n\n    Returns an array of [index, value] pairs from the source collection,\n    starting with the given index.\n\n-   **concat(...iterables)**\n\n    Produces a new collection of the same type containing all the values\n    of itself and the values of any number of other collections.  Favors\n    the last of duplicate values.  For map-like objects, the given\n    iterables are treated as map-like objects and each successively\n    updates the result.  Array is like a map from index to value.  List,\n    Set, and SortedSet are like maps from nodes to values.\n\n    (Array, ~~Object+~~, Iterator, List, Set, Map, MultiMap,\n    SortedSet, SortedMap, LruSet, LruMap, SortedArray, SortedArraySet,\n    SortedArrayMap, FastSet, FastMap, Dict, Heap)\n\n-   **keys()**\n\n    Returns an array of the keys.\n\n    (Object, Map, MultiMap, SortedMap, LruMap, SortedArrayMap, FastMap,\n    Dict)\n\n-   **values()**\n\n    Returns an array of the values\n\n    (Object+, Map, MultiMap, SortedMap, LruMap, SortedArrayMap, FastMap,\n    Dict)\n\n-   **entries()**\n\n    Returns an array of `[key, value]` pairs for each entry.\n\n    (Object+, Map, MultiMap, SortedMap, LruMap, SortedArrayMap, FastMap,\n    Dict)\n\n-   **reduce(callback(result, value, key, object, depth), basis,\n    thisp)**:\n\n    (Array, Iterator, List, Set, Map, MultiMap, SortedSet, SortedMap,\n    LruSet, LruMap, SortedArray, SortedArraySet, SortedArrayMap,\n    FastSet, FastMap, Dict, Heap)\n\n-   **reduceRight(callback(result, value, key, object, depth), basis,\n    thisp)**:\n\n    (Array, List, SortedSet, ~~SortedMap~~, SortedArray, SortedArraySet,\n    ~~SortedArrayMap~~, Heap)\n\n-   **forEach(callback(value, key, object, depth), thisp)**\n\n    Calls the callback for each value in the collection.  The iteration\n    of lists is resilient to changes to the list.  Particularly, nodes\n    added after the current node will be visited and nodes added before\n    the current node will be ignored, and no node will be visited twice.\n\n    (Array, Object+, Iterator, List, Set, Map, MultiMap, WeakMap,\n    SortedSet, SortedMap, LruSet, LruMap, SortedArray, SortedArraySet,\n    SortedArrayMap, FastSet, FastMap, Dict, Heap)\n\n-   **map(callback(value, key, object, depth), thisp)**\n\n    (Array, Object+, Iterator, List, Set, Map, MultiMap, WeakMap,\n    SortedSet, SortedMap, LruSet, LruMap, SortedArray, SortedArraySet,\n    SortedArrayMap, FastSet, FastMap, Dict, Heap)\n\n-   **toArray()**\n\n    (Array+, Iterator, List, Set, Map, MultiMap, SortedSet, SortedMap,\n    LruSet, LruMap, SortedArray, SortedArraySet, SortedArrayMap,\n    FastSet, FastMap, Dict, Heap)\n\n-   **toObject()**\n\n    Converts any collection to an object, treating this collection as a\n    map-like object.  Array is like a map from index to value.\n\n    (Array+ Iterator, List, Map, MultiMap, SortedMap, LruMap,\n    SortedArrayMap, FastMap, Dict, Heap)\n\n-   **filter(callback(value, key, object, depth), thisp)**\n\n    (Array, Iterator, List, Set, Map, MultiMap, SortedSet, SortedMap,\n    LruSet, LruMap, SortedArray, SortedArraySet, SortedArrayMap,\n    FastSet, FastMap, Dict, Heap)\n\n-   **every(callback(value, key, object, depth), thisp)**\n\n    Whether every value passes a given guard.  Stops evaluating the\n    guard after the first failure.  Iterators stop consuming after the\n    the first failure.\n\n    (Array, Iterator, List, Set, Map, MultiMap, SortedSet, SortedMap,\n    LruSet, LruMap, SortedArray, SortedArraySet, SortedArrayMap,\n    FastSet, FastMap, Dict, Heap)\n\n-   **some(callback(value, key, object, depth), thisp)**\n\n    Whether there is a value that passes a given guard.  Stops\n    evaluating the guard after the first success.  Iterators stop\n    consuming after the first success.\n\n    (Array, Iterator, List, Set, Map, MultiMap, SortedSet, SortedMap,\n    LruSet, LruMap, SortedArray, SortedArraySet, SortedArrayMap,\n    FastSet, FastMap, Dict, Heap)\n\n-   **any()**\n\n    Whether any value is truthy.\n\n    (Array+, Iterator, List, Set, Map, MultiMap, SortedSet, SortedMap,\n    LruSet, LruMap, SortedArray, SortedArraySet, SortedArrayMap,\n    FastSet, FastMap, Dict, Heap)\n\n-   **all()**\n\n    Whether all values are truthy.\n\n    (Array+, Iterator, List, Set, Map, MultiMap, SortedSet, SortedMap,\n    LruSet, LruMap, SortedArray, SortedArraySet, SortedArrayMap,\n    FastSet, FastMap, Dict, Heap)\n\n-   **min()**\n\n    The smallest value.  This is fast for sorted collections (logarithic\n    for SortedSet, constant for SortedArray, SortedArraySet, and\n    SortedArrayMap), but slow for everything else (linear).\n\n    (Array+, Iterator, List, Set, Map, MultiMap, SortedSet, SortedMap,\n    LruSet, LruMap, SortedArray, SortedArraySet, SortedArrayMap,\n    FastSet, FastMap, Dict)\n\n-   **max()**\n\n    The largest value.  This is fast for sorted collections (logarithic\n    for SortedSet, constant for SortedArray, SortedArraySet, and\n    SortedArrayMap), but slow for everything else (linear).\n\n    (Array+, Iterator, List, Set, Map, MultiMap, SortedSet, SortedMap,\n    LruSet, LruMap, SortedArray, SortedArraySet, SortedArrayMap,\n    FastSet, FastMap, Dict, Heap)\n\n-   **one()**\n\n    Any single value, or throws an exception if there are no values.\n    This is very fast (constant) for all collections.  For a sorted set,\n    the value is not deterministic and depends on what value was most\n    recently accessed.\n\n    (Array+, List, Set, Map, MultiMap, SortedSet, SortedMap, LruSet,\n    LruMap, SortedArray, SortedArray, SortedArraySet, SortedArrayMap,\n    FastSet, FastMap, Dict, Heap)\n\n-   **only()**\n\n    The one and only value, or throws an exception if there are no\n    values or more than one value.\n\n    (Array+, List, Set, Map, MultiMap, SortedSet, SortedMap, LruSet,\n    LruMap, SortedArray, SortedArray, SortedArraySet, SortedArrayMap,\n    FastSet, FastMap, Dict, Heap)\n\n-   **sum()**\n\n    (Array+, Iterator, List, Set, Map, MultiMap, SortedSet,\n    SortedMap, LruSet, LruMap, SortedArray, SortedArraySet,\n    SortedArrayMap, FastSet, FastMap, Dict)\n\n-   **average()**\n\n    (Array+, Iterator, List, Set, Map, MultiMap, SortedSet,\n    SortedMap, LruSet, LruMap, SortedArray, SortedArraySet,\n    SortedArrayMap, FastSet, FastMap, Dict)\n\n-   **flatten()**\n\n    (Array+, Iterator, List, Set, Map, MultiMap, SortedSet,\n    SortedMap, LruSet, LruMap, SortedArray, SortedArraySet,\n    SortedArrayMap, FastSet, FastMap, Dict, Heap)\n\n-   **zip(...collections)**\n\n    (Array+, Iterator, List, Set, Map, MultiMap, SortedSet,\n    SortedMap, LruSet, LruMap, SortedArray, SortedArraySet,\n    SortedArrayMap, FastSet, FastMap, Dict, Heap)\n\n-   **enumrate(zero)**\n\n    (Array+, Iterator, List, Set, Map, MultiMap, SortedSet, SortedMap,\n    LruSet, LruMap, SortedArray, SortedArraySet, SortedArrayMap,\n    FastSet, FastMap, Dict, Heap)\n\n-   **clone(depth, memo)**\n\n    Replicates the collection.  Clones the values deeply, to the\n    specified depth, using the memo to resolve reference cycles.  (which\n    must the `has` and `set` parts of the Map interface, allowing\n    objects for keys)  The default depth is infinite and the default\n    memo is a WeakMap.\n\n    `Object.clone` can replicate object literals inheriting directly\n    from `Object.prototype` or `null`, or any object that implements\n    `clone` on its prototype.  Any other object causes `clone` to throw\n    an exception.\n\n    The `clone` method on any other objects is not intended to be used\n    directly since they do not necessarily supply a default depth and\n    memo.\n\n    (Array+, Object+, List, Set, Map, MultiMap, SortedSet,\n    SortedMap, LruSet, LruMap, SortedArray, SortedArraySet,\n    SortedArrayMap, FastSet, FastMap, Dict, Heap)\n\n-   **constructClone(values)**\n\n    Replicates a collection shallowly.  This is used by each `clone`\n    implementation to create a new collection of the same type, with the\n    same options (`equals`, `compare`, `hash` options), but it leaves\n    the job of deeply cloning the values to the more general `clone`\n    method.\n\n    (Array+, Object+, List, Set, Map, MultiMap, SortedSet,\n    SortedMap, LruSet, LruMap, SortedArray, SortedArraySet,\n    SortedArrayMap, FastSet, FastMap, Dict, Heap)\n\n-   **equals(that, equals)**\n\n    (Array+, Object+, List, Set, Map, MultiMap, SortedSet, SortedMap,\n    LruSet, LruMap, ~~SortedArray~~, SortedArraySet, SortedArrayMap,\n    FastSet, FastMap, Dict)\n\n-   **compare(that)**\n\n    (Array+, Object+, List, ~~SortedArray~~, ~~SortedArraySet~~)\n\n-   **iterate()**\n\n    Produces an iterator with a `next` method.  You may elect to get\n    richer iterators by wrapping this iterator with an `Iterator` from\n    the `iterator` module.  Iteration order of lists is resilient to\n    changes to the list.\n\n    (Array+, Iterator, List, Set, SortedSet, LruSet, SortedArray,\n    SortedArraySet, FastSet)\n\n    **iterate(start, end)**\n\n    Returns an iterator for all values at indicies in the half-open\n    interval [start, end), that is, greater than start, and less than\n    end.\n\n    (Array+)\n\n    **iterate(start, end)**\n\n    Returns an iterator for all values in the half-open interval [start,\n    end), that is, greater than start, and less than end.  The iterator\n    is resilient against changes to the data.\n\n    (SortedSet)\n\n-   **log(charmap, callback(node, write, writeAbove), log, logger)**\n\n    Writes a tree describing the internal state of the data structure to\n    the console.\n\n    `charmap` is an object that notes which characters to use to draw\n    lines.  By default, this is the `TreeLog.unicodeRound` property from the\n    `tree-log` module.  `TreeLog.unicodeSharp` and `TreeLog.ascii` are\n    alternatives.  The properties are:\n\n    -   intersection: ╋\n    -   through: ━\n    -   branchUp: ┻\n    -   branchDown: ┳\n    -   fromBelow: ╭\n    -   fromAbove: ╰\n    -   fromBoth: ┣\n    -   strafe: ┃\n\n    `callback` is a customizable function for rendering each node of the tree.\n    By default, it just writes the value of the node.  It accepts the node and\n    a writer functions.  The `write` function produces the line on which the\n    node joins the tree, and each subsequent line.  The `writeAbove` function\n    can write lines before the branch.\n\n    `log` and `loger` default to `console.log` and `console`.  To write\n    the representation to an array instead, they can be `array.push` and\n    `array`.\n\n    (SortedSet)\n\n\n### Iterator\n\n-   **dropWhile(callback(value, index, iterator), thisp)**\n\n-   **takeWhile(callback(value, index, iterator), thisp)**\n\n-   **mapIterator(callback(value, index, iterator))**\n\n    Returns an iterator for a mapping on the source values.  Values are\n    consumed on demand.\n\n-   **filterIterator(callback(value, index, iterator))**\n\n    Returns an iterator for those values from the source that pass the\n    given guard.  Values are consumed on demand.\n\n-   **zipIterator(...iterables)**\n\n    Returns an iterator that incrementally combines the respective\n    values of the given iterations.\n\n-   **enumerateIterator(start = 0)**\n\n    Returns an iterator that provides [index, value] pairs from the\n    source iteration.\n\n\n### Iterator utilities\n\n-   **cycle(iterable, times)**\n\n-   **concat(iterables)**\n\n-   **transpose(iterables)**\n\n-   **zip(...iterables)**\n\n    Variadic transpose.\n\n-   **chain(...iterables)**\n\n    Variadic concat.\n\n-   **range(start, stop, step)**\n\n    Iterates from start to stop by step.\n\n-   **count(start, step)**\n\n    Iterates from start by step, indefinitely.\n\n-   **repeat(value, times)**\n\n    Repeats the given value either finite times or indefinitely.\n\n\n## Change Listeners\n\nAll collections support change listeners.  There are three types of\nchanges.  Property changes, map changes, and range changes.\n\n### Property Changes\n\n`PropertyChanges` from the `listen/property-changes` module can\nconfigure listeners for property changes to specific keys of any object.\n\nWith the `listen/array-changes` module required, `PropertyChanges` can\nalso listen to changes to the length and indexed properties of an array.\nThe only caveat is that watched arrays can only modify their contents\nwith method calls like `array.push`.  All methods of a watched array\nsupport change dispatch.  In addition, arrays have a `set` method to\nmake setting the value at a particular index observable.\n\n-   PropertyChanges.addOwnPropertyChangeListener(object, key, listener, before)\n-   PropertyChanges.removeOwnPropertyChangeListener(object, key, listener, before)\n-   PropertyChanges.dispatchOwnPropertyChange(object, key, value, before)\n-   PropertyChanges.addBeforeOwnPropertyChangeListener(object, key, listener)\n-   PropertyChanges.removeBeforeOwnPropertyChangeListener(object, key, listener)\n-   PropertyChanges.dispatchBeforeOwnPropertyChange(object, key, value)\n-   PropertyChanges.getOwnPropertyChangeDescriptor(object, key)\n\nAll of these functions delegate to methods of the same name if one\nexists on the object.\n\n-   object.addOwnPropertyChangeListener(key, listener, before)\n-   object.removeOwnPropertyChangeListener(key, listener, before)\n-   object.dispatchOwnPropertyChange(key, value, before)\n-   object.addBeforeOwnPropertyChangeListener(key, listener)\n-   object.removeBeforeOwnPropertyChangeListener(key, listener)\n-   object.dispatchBeforeOwnPropertyChange(key, value)\n-   object.getOwnPropertyChangeDescriptor(key)\n\nAdditionally, `PropertyChanges.prototype` can be **mixed into** other\ntypes of objects to support the property change dispatch interface.  All\ncollections support this interface.\n\nThe **listener** for a property change receives the arguments `value`,\n`key`, and `object`, just as a `forEach` or `map` callback.  The\nlistener may alternately be a delegate object that implements one of\nthese methods:\n\n-   listener.handle + **key** + Change **or** WillChange\n-   listener.handleProperty + Change **or** WillChange\n-   listener.call\n\n### Map Changes\n\nA map change listener receives notifications for the creation, removal,\nor updates for any entry in a map data structure.\n\nWith the `listen/array-changes` module required, `Array` can also\ndispatch map changes for the values at each index.\n\n-   collection.addMapChangeListener(listener, token, before)\n-   collection.removeMapChangeListener(listener, token, before)\n-   collection.dispatchMapChange(key, value, before)\n-   collection.addBeforeMapChangeListener(listener)\n-   collection.removeBeforeMapChangeListener(listener)\n-   collection.dispatchBeforeMapChange(key, value)\n-   collection.getMapChangeDescriptor()\n\nThe **listener** for a map change receives the `value`, `key`, and\ncollection `object` as arguments, the same pattern as a `forEach` or\n`map` callback.  In the after change phase, a value of `undefined` may\nindicate that the value was deleted or set to `undefined`.  In the\nbefore change phase, a value of `undefined` may indicate the the value\nwas added or was previously `undefined`.\n\nThe listener may be a delegate object with one of the following methods,\nin order of precedence:\n\n-   listener.handleMap + Change **or** WillChange\n-   listener.handle + **token** + Map + Change **or** WillChange\n-   listener.call\n\nThe `listen/map-changes` module exports a map changes **mixin**.  The\nmethods of `MaxChanges.prototype` can be copied to any collection that\nneeds this interface.  Its mutation methods will then need to dispatch\nmap changes.\n\n### Range Changes\n\nA range change listener receives notifications when a range of values at\na particular position is added, removed, or replaced within an ordered\ncollection.\n\n-   collection.**add**RangeChange**Listener**(listener, token, before)\n-   collection.**remove**RangeChange**Listener**(listener, token, before)\n-   collection.**dispatch**RangeChange(plus, minus, index, before)\n-   collection.add**Before**RangeChange**Listener**(listener)\n-   collection.remove**Before**RangeChange**Listener**(listener)\n-   collection.dispatch**Before**RangeChange(plus, minus, index)\n-   collection.**get**RangeChange**Descriptor**()\n\nThe **listener** for a range change is a function that accepts `plus`,\n`minus`, and `index` arguments.  `plus` and `minus` are the values that\nwere added or removed at the `index`.  Whatever operation caused these\nchanges is equivalent to:\n\n```javascript\nvar minus = collection.splice(index, minus.length, ...plus)\n```\n\nThe listener can alternately be a delegate object with one of the\nfollowing methods in order of precedence:\n\n-   handle + **token** + Range + Change **or** WillChange\n-   handleRange + Change **or** WillChange\n-   call\n\nThe following support range change dispatch:\n\n-   `Array` with `require(\"collections/listen/array-changes\")`\n-   `SortedSet`\n-   `SortedArray`\n-   `SortedArraySet`\n\nThe `listen/range-changes` module exports a range changes **mixin**.\nThe methods of `RangeChanges.prototype` can be copied to any collection\nthat needs this interface.  Its mutation methods will need to dispatch\nthe range changes.\n\nAll **descriptors** are objects with the properties `changeListeners`\nand `willChangeListeners`.  Both are arrays of listener functions or\nobjects, in the order in which they were added.\n\n\n## Miscellanea\n\n### Set and Map\n\nSet and map are like hash tables, but not implemented with a block of\nmemory as they would be in a lower-level language.  Most of the work of\nproviding fast insertion and lookup based on a hash is performed by the\nunderlying plain JavaScript object.  Each key of the object is a hash\nstring and each value is a List of values with that hash.  The inner\nlist resolves collisions.  With a good `hash` method, the use of the\nlist can be avoided.\n\nSets and maps both have a `log` function that displays the internal\nstructure of the bucket list in an NPM-style.\n\n```\n┣━┳ 1\n┃ ┗━━ {\"key\":1,\"value\":\"a\"}\n┣━┳ 2\n┃ ┣━━ {\"key\":2,\"value\":\"c\"}\n┃ ┗━━ {\"key\":2,\"value\":\"d\"}\n┗━┳ 3\n  ┗━━ {\"key\":3,\"value\":\"b\"}\n```\n\n\n### Sorted Set and Sorted Map\n\nA binary splay tree is a balanced binary tree that rotates the most\nfrequently used entries toward the root such that they can be accessed the\nmost quickly.  `sorted-set` and `sorted-map` are backed by a splay tree.\n\nAll map implementations use an underlying set implementation.  Any map\ncan be implemented trivially atop a set by wrapping `compare`, `equals`,\nor `hash` to operate on the key of an entry.\n\nThe sorted set has a `root` node.  Each node has a `left` and `right`\nproperty, which may be null.  Nodes are returned by all of the \"find\"\nfunctions, and provided as the `key` argument to callbacks.\n\nBoth `sorted-set` and `sorted-map` implement a `log` function which can\nproduce NPM-style visualizations of the internal state of the sorted\ntree.\n\n```\n> set.log(SortedSet.ascii)\n  .-+ -3\n  | '-- -2\n.-+ -1\n+ 0\n| .-- 1\n'-+ 2\n  '-- 3\n```\n\n```\n> set.log(SortedSet.unicodeRound)\n  ╭━┳ -3\n  ┃ ╰━━ -2\n╭━┻ -1\n╋ 0\n┃ ╭━┳ 1\n┃ ┃ ╰━━ 2\n╰━┻ 3\n```\n\n\n### Object and Function Shims\n\nThe collection methods on the `Object` constructor all polymorphically\ndelegate to the corresponding method of any object that implements the\nmethod of the same name.  So, `Object.has` can be used to check whether\na key exists on an object, or in any collection that implements `has`.\nThis permits the `Object` interface to be agnostic of the input type.\n\n`Array.from` creates an array from any iterable.\n\n`Array.unzip` transposes a collection of arrays, so rows become columns.\n\n`Array.empty` is an empty array, frozen if possible.  Do not modify it.\n\n`Object.from` creates an object from any map or collection.  For arrays\nand array-like collections, uses the index for the key.\n\n`Object.empty` is an empty object literal.\n\n`Object.isObject(value)` tests whether it is safe to attempt to access\nproperties of a given value.\n\n`Object.is(x, y)` compares objects for exact identity and is a good\nalternative to `Object.equals` in many collections.\n\n`Object.getValueOf(value)` safely and idempotently returns the value of\nan object or value by only calling the `valueOf()` if the value\nimplements that method.\n\n`Object.owns` is a shorthand for `Object.prototype.hasOwnProperty.call`.\n\n`Object.can(value, name)` checks whether an object implements a method\non its prototype chain.  An owned function property does not qualify as\na method, to aid in distinguishing \"static\" functions.\n\n`Object.concat(...maps)` and `Object.from(entries)` construct an object\nby adding the entries of other objects in order.  The maps can be other\nobjects, arrays of entries, or map alike collections.\n\n`Function.noop` is returns undefined.\n\n`Function.identity` returns its first argument.\n\n`Function.by(relation)` creates a comparator from a relation function.\n\n`Function.get(key)` creates a relation that returns the value for the\nproperty of a given object.\n\n\n### References\n\n- a SplayTree impementation buried in Fedor Indutny’s super-secret\n  [Callgrind](https://github.com/indutny/callgrind.js). This\n  implementation uses parent references.\n- a SplayTree implementation adapted by [Paolo\n  Fragomeni](https://github.com/hij1nx/forest) from the V8 project and\n  based on the top-down splaying algorithm from \"Self-adjusting Binary\n  Search Trees\" by Sleator and Tarjan. This does not use or require\n  parent references, so I favored it over Fedor Indutny’s style.\n- the interface of ECMAScript harmony [simple maps and\n  sets](http://wiki.ecmascript.org/doku.php?id=harmony:simple_maps_and_sets)\n- a SplayTree implementation from [JavaScript data\n  structures](derrickburns/Javascript-Data-Structures) mainted by\n  Derrick Burns that supports change-resilient iterators and a\n  comprehensive set of introspection functions.\n\n### Future work\n\nGoals\n\n- automate the generation of the method support tables in readme and\n  normalize declaration order\n- comprehensive specs and spec coverage tests\n- fast list splicing\n- dict map changes\n- revise map changes to use separate handlers for add/delete\n- revise tokens for range and map changes to specify complete alternate\n  delegate methods, particularly for forwarding directly to dispatch\n- implement on/once/off listeners\n- Make it easier to created a SortedSet with a criterion like\n  Function.by(Function.get('name'))\n\nMore possible collections\n\n- sorted-order (sorted, can contain duplicates, perhaps backed by splay\n  tree with relaxation on the uniqueness invariant)\n- sorted-multi-map (sorted, can contain duplicate entries, backed by\n  sorted-map)\n- trie-set\n- trie-map\n- immutable-* (mutation functions return new objects that largely share\n  the previous version's internal state, some perhaps backed by a hash\n  trie)\n\n",
  "readmeFilename": "README.md",
  "_id": "collections@0.1.24",
  "_from": "collections@~0.1.3"
}
