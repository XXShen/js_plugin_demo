{
  "name": "grunt-gh-pages",
  "description": "Publish to GitHub Pages with Grunt.",
  "version": "0.9.1",
  "homepage": "https://github.com/tschaub/grunt-gh-pages",
  "author": {
    "name": "Tim Schaub",
    "url": "http://tschaub.net/"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/tschaub/grunt-gh-pages.git"
  },
  "bugs": {
    "url": "https://github.com/tschaub/grunt-gh-pages/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://tschaub.mit-license.org/"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {
    "q": "0.9.3",
    "q-io": "1.6.5",
    "graceful-fs": "2.0.1",
    "async": "0.2.9",
    "wrench": "1.5.1"
  },
  "devDependencies": {
    "chai": "1.8.1",
    "grunt": "0.4.2",
    "grunt-cafe-mocha": "0.1.10",
    "grunt-contrib-jshint": "0.7.2",
    "grunt-contrib-watch": "0.5.3",
    "grunt-cli": "0.1.11",
    "tmp": "0.0.20"
  },
  "peerDependencies": {
    "grunt": "~0.4.1"
  },
  "keywords": [
    "gruntplugin",
    "git",
    "grunt",
    "gh-pages",
    "github"
  ],
  "readme": "# grunt-gh-pages\n**Publish to GitHub Pages with Grunt**\n\nUse [Grunt](http://gruntjs.com/) to push to your `gh-pages` branch hosted on GitHub or any other branch anywhere else.\n\n## Getting Started\nThis plugin requires Grunt `~0.4.1` and Git `>=1.7.6`.\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [`gruntfile.js`](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-gh-pages --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your `gruntfile.js` with this line:\n\n```js\ngrunt.loadNpmTasks('grunt-gh-pages');\n```\n\n## The `gh-pages` task\n\n### Overview\nIn your project's Gruntfile, add a section named `gh-pages` to the data object passed into `initConfig`.\n\n```js\ngrunt.initConfig({\n  'gh-pages': {\n    options: {\n      base: 'dist'\n    },\n    src: ['**']\n  }\n});\n```\n\nRunning this task with `grunt gh-pages` will create a temporary clone of the current repository, create a `gh-pages` branch if one doesn't already exist, copy over all files from the `dist` directory that match patterns from the`src` configuration, commit all changes, and push to the `origin` remote.\n\nIf a `gh-pages` branch already exists, it will be updated with all commits from the remote before adding any commits from the provided `src` files.\n\n**Note** that any files in the `gh-pages` branch that are *not* in the `src` files **will be removed**.  See the [`add` option](#optionsadd) if you don't want any of the existing files removed.\n\nThe `gh-pages` task is a multi-task, so different targets can be configured with different `src` files and `options`.  For example, to have the `gh-pages:gh-pages` target push to `gh-pages` and a second `gh-pages:foo` target push to a `bar` branch, the multi-task could be configured as follows:\n\n```js\ngrunt.initConfig({\n  'gh-pages': {\n    options: {\n      // Options for all targets go here.\n    },\n    'gh-pages': {\n      options: {\n        base: 'build'\n      },\n      // These files will get pushed to the `gh-pages` branch (the default).\n      src: ['index.html']\n    },\n    'foo': {\n      options: {\n        base: 'bar-build',\n        branch: 'bar'\n      },\n      // These files will get pushed to the `bar` branch.\n      src: ['other.txt']\n    }\n  }\n});\n```\n\n\n### Options\n\nThe default task options work for simple cases cases.  The options described below let you push to alternate branches, customize your commit messages, and more.\n\nOptions for all targets can be configured on the task level.  Individual tasks can also have their own options that override task level options.\n\nAll options can be overriden with command line flags.  The pattern to provide an option is like `--gh-pages-optname foo` where `optname` is the option name and `foo` is the option value.  For example, to supply the [`tag`](#optionstag) and [`message`](#optionsmessage), the task could be run as follows:\n\n    grunt gh-pages --gh-pages-tag 'v1.2.3' --gh-pages-message 'Tagging v1.2.3'\n\n#### <a id=\"optionsbase\">options.base</a>\n * type: `string`\n * default: `process.cwd()`\n\nThe base directory for all source files (those listed in the `src` config property).  By default, source files are assumed to be relative to the current working directory, and they will be copied to the target with this relative path.  If your source files are all in a different directory (say, `build`), and you want them to be copied with a path relative to that directory, provide the directory path in the `base` option (e.g. `base: 'build'`).\n\nExample use of the `base` option:\n\n```js\n/**\n * Given the following directory structure:\n *\n *   build/\n *     index.html\n *     js/\n *       site.js\n *\n * The task below will create a `gh-pages` branch that looks like this:\n *\n *   index.html\n *   js/\n *     site.js\n *\n */\ngrunt.initConfig({\n  'gh-pages': {\n    options: {\n      base: 'build'\n    },\n    src: '**/*'\n  }\n});\n```\n\n#### <a id=\"optionsdotfiles\">options.dotfiles</a>\n * type: `boolean`\n * default: `false`\n\nInclude dotfiles.  By default, files starting with `.` are ignored unless they are explicitly provided in the `src` array.  If you want to also include dotfiles that otherwise match your `src` patterns, set `dotfiles: true` in your options.\n\nExample use of the `dotfiles` option:\n\n```js\n/**\n * The task below will push dotfiles (directories and files)\n * that otherwise match the `src` pattern.\n */\ngrunt.initConfig({\n  'gh-pages': {\n    options: {\n      base: 'dist',\n      dotfiles: true\n    },\n    src: '**/*'\n  }\n});\n```\n\n#### <a id=\"optionsadd\">options.add</a>\n * type: `boolean`\n * default: `false`\n\nOnly add, and never remove existing files.  By default, existing files in the target branch are removed before adding the ones from your `src` config.  If you want the task to add new `src` files but leave existing ones untouched, set `add: true` in your target options.\n\nExample use of the `add` option:\n\n```js\n/**\n * The task below will only add files to the `gh-pages` branch, never removing\n * any existing files (even if they don't exist in the `src` config).\n */\ngrunt.initConfig({\n  'gh-pages': {\n    options: {\n      base: 'build',\n      add: true\n    },\n    src: '**/*'\n  }\n});\n```\n\n#### <a id=\"optionsrepo\">options.repo</a>\n * type: `string`\n * default: url for the origin remote of the current dir (assumes a git repository)\n\nBy default, the `gh-pages` task assumes that the current working directory is a git repository, and that you want to push changes to the `origin` remote.  This is the most common case - your `gruntfile.js` builds static resources and the `gh-pages` task pushes them to a remote.\n\nIf instead your `gruntfile.js` is not in a git repository, or if you want to push to another repository, you can provide the repository URL in the `repo` option.\n\nExample use of the `repo` option:\n\n```js\n/**\n * If the current directory is not a clone of the repository you want to work\n * with, set the URL for the repository in the `repo` option.  This task will\n * push all files in the `src` config to the `gh-pages` branch of the `repo`.\n */\ngrunt.initConfig({\n  'gh-pages': {\n    options: {\n      base: 'build',\n      repo: 'https://example.com/other/repo.git'\n    },\n    src: '**/*'\n  }\n});\n```\n\n\n#### <a id=\"optionsbranch\">options.branch</a>\n * type: `string`\n * default: `'gh-pages'`\n\nThe name of the branch you'll be pushing to.  The default uses GitHub's `gh-pages` branch, but this same task can be used to push to any branch on any remote.\n\nExample use of the `branch` option:\n\n```js\n/**\n * This task pushes to the `master` branch of the configured `repo`.\n */\ngrunt.initConfig({\n  'gh-pages': {\n    options: {\n      base: 'build',\n      branch: 'master',\n      repo: 'https://example.com/other/repo.git'\n    },\n    src: '**/*'\n  }\n});\n```\n\n\n#### <a id=\"optionstag\">options.tag</a>\n * type: `string`\n * default: `''`\n\nCreate a tag after committing changes on the target branch.  By default, no tag is created.  To create a tag, provide the tag name as the option value.\n\nExample use of the `tag` option from the command line:\n\n    grunt gh-pages --gh-pages-tag 'v3.2.1'\n\n\n#### <a id=\"optionsmessage\">options.message</a>\n * type: `string`\n * default: `'Updates'`\n\nThe commit message for all commits.\n\nExample use of the `message` option:\n\n```js\n/**\n * This adds commits with a custom message.\n */\ngrunt.initConfig({\n  'gh-pages': {\n    options: {\n      base: 'build',\n      message: 'Auto-generated commit'\n    },\n    src: '**/*'\n  }\n});\n```\n\nAlternatively, this option can be set on the command line:\n\n```shell\ngrunt gh-pages --gh-pages-message 'Making commits'\n```\n\n\n#### <a id=\"optionsuser\">options.user</a>\n * type: `Object`\n * default: `null`\n\nIf you are running the `gh-pages` task in a repository without a `user.name` or `user.email` git config properties (or on a machine without these global config properties), you must provide user info before git allows you to commit.  The `options.user` object accepts `name` and `email` string values to identify the committer.\n\nExample use of the `user` option:\n\n```js\ngrunt.initConfig({\n  'gh-pages': {\n    options: {\n      base: 'build',\n      user: {\n        name: 'Joe Code',\n        email: 'coder@example.com'\n      }\n    },\n    src: '**/*'\n  }\n});\n```\n\n#### <a id=\"optionsclone\">options.clone</a>\n * type: `string`\n * default: `'.grunt/grunt-gh-pages/gh-pages/repo'`\n\nPath to a directory where your repository will be cloned.  If this directory doesn't already exist, it will be created.  If it already exists, it is assumed to be a clone of your repository.  If you stick with the default value (recommended), you will likely want to add `.grunt` to your `.gitignore` file.\n\nExample use of the `clone` option:\n\n```js\n/**\n * If you already have a temp directory, and want the repository cloned there,\n * use the `clone` option as below.  To avoid re-cloning every time the task is\n * run, this should be a directory that sticks around for a while.\n */\ngrunt.initConfig({\n  'gh-pages': {\n    options: {\n      base: 'build',\n      clone: 'path/to/tmp/dir'\n    },\n    src: '**/*'\n  }\n});\n```\n\n\n#### <a id=\"optionspush\">options.push</a>\n * type: `boolean`\n * default: `true`\n\nPush branch to remote.  To commit only (with no push) set to `false`.\n\nExample use of the `push` option:\n\n```js\ngrunt.initConfig({\n  'gh-pages': {\n    options: {\n      base: 'build',\n      push: false\n    },\n    src: '**/*'\n  }\n});\n```\n\n#### <a id=\"optionssilent\">options.silent</a>\n * type: `boolean`\n * default: `false`\n\nSuppress logging.  This option should be used if the repository URL or other information passed to git commands is sensitive and should not be logged.  With silent `true` log messages are suppressed and error messages are sanitized.\n\nExample use of the `silent` option:\n\n```js\n/**\n * This configuration will suppress logging and sanitize error messages.\n */\ngrunt.initConfig({\n  'gh-pages': {\n    options: {\n      base: 'build',\n      repo: 'https://' + process.env.GH_TOKEN + '@github.com/user/private-repo.git',\n      silent: true\n    },\n    src: '**/*'\n  }\n});\n```\n\n\n#### <a id=\"optionsgit\">options.git</a>\n * type: `string`\n * default: `'git'`\n\nYour `git` executable.\n\nExample use of the `git` option:\n\n```js\n/**\n * If `git` is not on your path, provide the path as shown below.\n */\ngrunt.initConfig({\n  'gh-pages': {\n    options: {\n      base: 'build',\n      git: '/path/to/git'\n    },\n    src: '**/*'\n  }\n});\n```\n\n## Dependencies\n\nNote that this plugin requires Git 1.7.6 or higher (because it uses the `--exit-code` option for `git ls-remote`).  If you'd like to see this working with earlier versions of Git, please [open an issue](https://github.com/tschaub/grunt-gh-pages/issues).\n\n[![Current Status](https://secure.travis-ci.org/tschaub/grunt-gh-pages.png?branch=master)](https://travis-ci.org/tschaub/grunt-gh-pages)\n",
  "readmeFilename": "README.md",
  "_id": "grunt-gh-pages@0.9.1",
  "_from": "grunt-gh-pages@~0.9.1"
}
